# 발표 슬라이드 초안: 6일간의 도전: GrokParseNoteLM

## 1. 소개
- **제목**: 6일간의 도전: GrokParseNoteLM
- **부제목**: 업스테이지 Document Parse와 windsurf로 구현한 NotebookLM 스타일 문서 파싱 도구
- **내용**:
  - 프로젝트 이름: GrokParseNoteLM.
  - 목표: NotebookLM과 유사한 문서 파싱 도구 개발.
  - 주요 기능: 업스테이지 Document Parse로 PDF 파싱, NotebookLM 스타일 UI.
  - 발표 개요: 개발 과정, 기능 강조, 데모.

## 2. 기획 과정: Grok과의 협업
- **목표 설정**:
  - Grok과 함께 6일 내 달성 목표 설정: 문서 파싱 + UI.
  - 테스트 단계(단위, 통합, 사용자) 제안.
- **도구 선정**:
  - 업스테이지 Document Parse 추천.
  - Flask와 Tailwind CSS로 UI 구현.
- **장점**:
  - Grok의 실시간 조언으로 효율적 기획.
  - 코드 제공으로 개발 속도 향상.

## 3. 개발 과정 (1)
- **5/20 (화)**: 프로젝트 설정, 업스테이지 API 테스트.
  - GitHub 리포지토리 생성 (`GrokParseNoteLM`), API 키 발급.
  - Playground UI로 샘플 PDF 파싱 테스트.
- **5/21 (수)**: 문서 파싱 모듈 개발.
  - 업스테이지 API 통합, 파싱 결과 출력.
- **5/22 (목)**: NotebookLM 스타일 UI 구현.
  - Flask+Tailwind CSS로 UI 개발.

## 4. 개발 과정 (2)
- **5/23 (금)**: UI 개선, (선택) 키워드 추출 추가.
  - UI 스타일링 조정.
  - spaCy로 키워드 추출 프로토타입.
- **5/24 (토)**: 데모 준비, 발표 자료 초안.
  - 테스트 및 버그 수정.
- **5/25 (일)**: 최종 점검 및 발표.
  - 데모 리허설.

## 5. 특정 기능: 문서 파싱 및 UI
- **문서 파싱**:
  - 업스테이지 Document Parse API 사용.
  - 장점: 높은 정확도, 빠른 처리.
- **NotebookLM 스타일 UI**:
  - 좌측: 소스 업로드 패널.
  - 우측: 파싱 결과 표시.
  - 장점: 직관적, 사용자 친화적.

## 6. windsurf(Python)의 장점
- **빠른 개발**:
  - Flask로 웹 앱 신속 구현.
- **풍부한 라이브러리**:
  - requests, spaCy로 기능 확장 용이.
- **디버깅 용이**:
  - Python 문법으로 테스트 간편.
- **결론**: 짧은 시간 내 GrokParseNoteLM 프로토타입 완성.

## 7. 데모
- **시연**:
  - 샘플 PDF 업로드.
  - 업스테이지 API로 파싱.
  - NotebookLM 스타일 UI에 결과 표시.
  - (선택) 키워드 추출 출력.

## 8. 향후 계획
- 질문 응답 시스템 추가.
- 오디오 요약 기능 구현.
- 웹 소스 검색 기능 확장.
- UI/UX 개선.

## 9. Q&A
- 질문 환영!